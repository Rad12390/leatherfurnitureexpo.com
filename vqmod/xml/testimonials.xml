<?xml version="1.0" encoding="UTF-8"?>
<modification>
	<id>To leave a Testimonial on testimonials page</id>
	<version>1.0</version>
	<vqmver>1.0</vqmver>
	<author>shweta</author>

	<file name="catalog/view/theme/sofa/template/product/testimonials.tpl" error="log">
		<operation>
			<search position="after"><![CDATA[<div id="page"><?php echo $pagination; ?></div>]]></search>
			<add><![CDATA[ <br><br><div id="add_review">
             <a id ="add_button" data-url="<?php echo HTTP_SERVER; ?>index.php?route=product/product/addreview" data-width=650 data-height=680 href="javascript:void(0);">Add a review</a> 
         </div><br>]]></add>
		</operation>
                
                <operation>
			<search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
			<add><![CDATA[<style type="text/css"> #add_button {
	
background-color: #5185B7;
	
border: 1px solid #6e6e6e;
	
font-family: Century Gothic, Georgia, "Times New Roman", Times, serif;
	
text-align: center;
	
text-transform: uppercase;
	
padding: 5px 5px 5px 5px;
	
height: 27px;
	
color: #ffffff;
	
font-size: 13px;
	
font-weight: normal;
} </style>
                            
<script type="text/javascript">
    $(document).ready(function () {
                
    $('#add_review a').on({

        click: function (e) {

            var pageURL = $(this).data('url');
            var title="review"
            var width = $(this).data('width');
            var height = $(this).data('height')
            var left = (screen.width / 2) - (width / 2);
            var top = (screen.height / 2) - (height / 2);
            var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=' + width + ', height=' + height + ', top=' + top + ', left=' + left);

        }
    });
  });
   
    </script>
]]></add>
		</operation>               
	</file>
        
        <file name="catalog/controller/product/product.php" error="log">
		<operation>
			<search position="before"><![CDATA[public function testimonials()]]></search>
			<add><![CDATA[public function addreview() {
        $this->language->load('product/product');
        $this->load->model('catalog/product');
        $this->load->model('catalog/review');

        $this->data['entry_review'] = $this->language->get('entry_review');
        $this->data['add_review'] = $this->language->get('text_add_review');
        $this->data['entry_text'] = $this->language->get('entry_text');
        $this->data['entry_name'] = $this->language->get('entry_name');
        $this->data['entry_rating'] = $this->language->get('entry_rating');
        $this->data['entry_product'] = $this->language->get('entry_product');
        $this->data['entry_good'] = $this->language->get('entry_good');
        $this->data['entry_bad'] = $this->language->get('entry_bad');
        $this->data['entry_review_date'] = $this->language->get('entry_review_date');
        $this->data['text_success'] = $this->language->get('text_success');
        
        
        $this->data['action'] = $this->url->link('product/product/addreview');
        
      


        if (($this->request->server['REQUEST_METHOD'] == 'POST')) {
           

            $this->model_catalog_review->addtestimonialreview($this->request->post);
            $this->redirect("index.php?route=product/product/review_success"); 
        }
                                       
        $this->template = $this->config->get('config_template') . '/template/product/addreview.tpl';
        $this->response->setOutput($this->render());
    } 
                            
 
    public function review_success(){   
        if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/review_success.tpl')) {

            $this->template = $this->config->get('config_template') . '/template/product/review_success.tpl';
        } else {
            $this->template = 'default/template/product/review_success.tpl';
        }

        $this->response->setOutput($this->render());
    }                       
   ]]></add>
		</operation>
        </file>        
                <file name="catalog/controller/product/product_grouped.php" error="log">
                <operation>
			<search position="before"><![CDATA[public function review()]]></search>
			<add><![CDATA[ public function product_grouped_autocomplete() {
        
           $json = array();
		
		if (isset($this->request->get['filter_name']) || isset($this->request->get['filter_model']) || isset($this->request->get['filter_category_id'])) {
			$this->load->model('catalog/product_grouped');
			
			if (isset($this->request->get['filter_name'])) {
				$filter_name = $this->request->get['filter_name'];
			} else {
				$filter_name = '';
			}
			
			if (isset($this->request->get['filter_model'])) {
				$filter_model = $this->request->get['filter_model'];
			} else {
				$filter_model = '';
			}
			
			if (isset($this->request->get['limit'])) {
				$limit = $this->request->get['limit'];	
			} else {
				$limit = 20;	
			}			
						
			$data = array(
				'filter_name'  => $filter_name,
				'filter_model' => $filter_model,
				'start'        => 0,
				'limit'        => $limit
			);
			$this->load->model('tool/image');
			$results = $this->model_catalog_product_grouped->getProducts($data);
			
			foreach ($results as $result) {
				$option_data = array();
				
				$product_options = $this->model_catalog_product_grouped->getProductOptions($result['product_id']);
                                
                                $product_grouped = array();
				foreach ($product_options as $product_option) {
					$option_info = $this->model_catalog_product_grouped->getOption($product_option['option_id']);
					
					if ($option_info) {				
						if ($option_info['type'] == 'select' || $option_info['type'] == 'radio' || $option_info['type'] == 'checkbox' || $option_info['type'] == 'image') {
							$option_value_data = array();
							
							foreach ($product_option['product_option_value'] as $product_option_value) {
								$option_value_info = $this->model_catalog_product_grouped->getOptionValue($product_option_value['option_value_id']);
						
								if ($option_value_info) {
									$option_value_data[] = array(
										'product_option_value_id' => $product_option_value['product_option_value_id'],
										'option_value_id'         => $product_option_value['option_value_id'],
										'name'                    => $option_value_info['name'],
										'price'                   => (float)$product_option_value['price'] ? $this->currency->format($product_option_value['price'], $this->config->get('config_currency')) : false,
										'price_prefix'            => $product_option_value['price_prefix']
									);
								}
							}
						
							$option_data[] = array(
								'product_option_id' => $product_option['product_option_id'],
								'option_id'         => $product_option['option_id'],
								'name'              => $option_info['name'],
								'type'              => $option_info['type'],
								'option_value'      => $option_value_data,
								'required'          => $product_option['required']
							);	
						} else {
							$option_data[] = array(
								'product_option_id' => $product_option['product_option_id'],
								'option_id'         => $product_option['option_id'],
								'name'              => $option_info['name'],
								'type'              => $option_info['type'],
								'option_value'      => $product_option['option_value'],
								'required'          => $product_option['required']
							);				
						}
					}
				}
                                
                                $json[] = array(
					'product_id'      => $result['product_id'],
					'name'            => strip_tags(html_entity_decode($result['name'], ENT_QUOTES, 'UTF-8')),	
					'model'           => $result['model'],
                                        'product_grouped' => $product_grouped,
					'option'          => $option_data,
					'price'           => $result['price'],
                                        
				);	
			}
		}

		$this->response->setOutput(json_encode($json));
	}    ]]></add>
		</operation>
                
                             
	</file>
        
        <file name="catalog/model/catalog/review.php" error="log">
		<operation>
			<search position="before"><![CDATA[public function addReviewWithLocation($product_id, $data)]]></search>
			<add><![CDATA[public function addtestimonialreview($data)
            {
       $this->db->query("INSERT INTO " . DB_PREFIX . "review SET language_id = '" . (int) $this->config->get('config_language_id') . "',author = '" . $this->db->escape($data['author']) . "', products_name = '" . $this->db->escape($data['product']) . "', product_id = '" . (int) $product_id . "',text = '" . $this->db->escape($data['text']) . "',rating = '" . (int) $data['rating'] . "', date_added = NOW()");
     
            }]]></add>
		</operation>
        </file>
        <file name="catalog/model/catalog/product_grouped.php" error="log">
		<operation>
			<search position="before"><![CDATA[public function getProductGroupedType($product_id) {]]></search>
			<add><![CDATA[   public function getProducts($data = array()) {
        $product_data = array();

        //$sql = "SELECT * FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id)";
        
        $sql = "SELECT *, IFNULL((SELECT GROUP_CONCAT( DISTINCT pcd.name) FROM ".DB_PREFIX."category_description pcd, ".DB_PREFIX."product_to_category p2c WHERE p2c.product_id=p.product_id AND pcd.category_id=p2c.category_id AND pcd.language_id='" . (int)$this->config->get('config_language_id') . "'),'') as category_name FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) ";
        
        
        $sql .= " LEFT JOIN " . DB_PREFIX . "product_grouped_type pgt ON (p.product_id = pgt.product_id)";

        $sql .= " WHERE p.model = 'grouped' AND pd.language_id = '" . (int) $this->config->get('config_language_id') . "'";
        
        if (isset($data['filter_category']) && !is_null($data['filter_category'])) {
                            
                            //if ($data['filter_category']==-1){
                              //$sql = "SELECT *, '' as category_name FROM " . DB_PREFIX . "product p LEFT JOIN  " . DB_PREFIX . "product_to_category pc ON (p.product_id=pc.product_id)  LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "') WHERE pc.category_id IS NULL";
                            //} else
                             {
                                 $sql = "SELECT *, IFNULL((SELECT GROUP_CONCAT( DISTINCT pcd.name) FROM ".DB_PREFIX."category_description pcd, ".DB_PREFIX."product_to_category p2c WHERE p2c.product_id=p.product_id AND pcd.category_id=p2c.category_id AND pcd.language_id='" . (int)$this->config->get('config_language_id') . "'),'') as category_name FROM (" . DB_PREFIX . "product p, " . DB_PREFIX . "product_to_category pc) LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) ";
        
        
        $sql .= " LEFT JOIN " . DB_PREFIX . "product_grouped_type pgt ON (p.product_id = pgt.product_id)";

        $sql .= " WHERE p.model = 'grouped' AND pd.language_id = '" . (int) $this->config->get('config_language_id') . "'";

                              $sql .= " AND pc.category_id='".(int)$data['filter_category']."' AND pc.product_id=p.product_id";
                            }
        }
        if (!empty($data['filter_name'])) {
            $sql .= " AND LCASE(pd.name) LIKE '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "%'";
        }
        
        if (!empty($data['filter_osn'])) {
            $sql .= " AND LCASE(p.osn) LIKE '" . $this->db->escape(utf8_strtolower($data['filter_osn'])) . "%'";
        }

        if (!empty($data['filter_price'])) {
            $sql .= " AND p.price LIKE '" . $this->db->escape($data['filter_price']) . "%'";
        }

        if (isset($data['filter_status']) && !is_null($data['filter_status'])) {
            $sql .= " AND p.status = '" . (int) $data['filter_status'] . "'";
        }

        if (isset($data['filter_type']) && !is_null($data['filter_type'])) {
            $sql .= " AND pgt.product_type = '" . (int) $data['filter_type'] . "'";
        }

         $sql .= " GROUP BY p.product_id";

        $sort_data = array(
            'pgt.product_type',
            'pd.name',
            'p.osn',
            'p.starting_price_product',
            'p.status',
            'p.sort_order'
        );

        if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {
            $sql .= " ORDER BY " . $data['sort'];
        } else {
            $sql .= " ORDER BY pd.name";
        }

        if (isset($data['order']) && ($data['order'] == 'DESC')) {
            $sql .= " DESC";
        } else {
            $sql .= " ASC";
        }

        if (isset($data['start']) || isset($data['limit'])) {
            if ($data['start'] < 0) {
                $data['start'] = 0;
            }

            if ($data['limit'] < 1) {
                $data['limit'] = 20;
            }

            $sql .= " LIMIT " . (int) $data['start'] . "," . (int) $data['limit'];
        }

        $query = $this->db->query($sql);
        
        foreach ($query->rows as $result) {
            $product_data[] = array(
                'category_name' => $result['category_name'],
                'product_id' => $result['product_id'],
                'image' => $result['image'],
                'name' => $result['name'],
                'osn' => $result['osn'],
                'price' => $result['starting_price_product'],  // $result['price'] ,
                'price_from' => $result['pgprice_from'],
                'price_to' => $result['pgprice_to'],
                'status' => $result['status']
            );
        }

        return $product_data;
    }
]]></add>
		</operation>
                
		<operation>
			<search position="before"><![CDATA[public function getProductGroupedType($product_id) {]]></search>
			<add><![CDATA[public function getProductOptions($product_id) {
        $product_option_data = array();

        $product_option_query = $this->db->query("SELECT * FROM " .  DB_PREFIX . "product_option po LEFT JOIN `" .  DB_PREFIX . "option` o ON (po.option_id = o.option_id) LEFT JOIN " .  DB_PREFIX . "option_description od ON (o.option_id = od.option_id) WHERE po.product_id = '" . (int)$product_id . "' AND od.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY o.sort_order");
        
        foreach ($product_option_query->rows as $product_option) {
            $product_option_value_data = array();

            $product_option_value_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_option_value WHERE product_option_id = '" . (int) $product_option['product_option_id'] . "'");

            foreach ($product_option_value_query->rows as $product_option_value) {
                $product_option_value_data[] = array(
                    'product_option_value_id' => $product_option_value['product_option_value_id'],
                    'option_value_id' => $product_option_value['option_value_id'],
                    'quantity' => $product_option_value['quantity'],
                    'subtract' => $product_option_value['subtract'],
                    'price' => $product_option_value['price'],
                    'price_prefix' => $product_option_value['price_prefix'],
                    'points' => $product_option_value['points'],
                    'points_prefix' => $product_option_value['points_prefix'],
                    'weight' => $product_option_value['weight'],
                    'weight_prefix' => $product_option_value['weight_prefix'],
                    'gradeforcolor' => $product_option_value['gradeforcolor'],
                    'option_child_id' => $product_option_value['option_child_id'],
                    'option_child_second' => $product_option_value['option_child_second']
                );
            }

            $product_option_data[] = array(
                'product_option_id' => $product_option['product_option_id'],
                'option_id' => $product_option['option_id'],
                'name' => $product_option['name'],
                'type' => $product_option['type'],
                'product_option_value' => $product_option_value_data,
                'option_value' => $product_option['option_value'],
                'required' => $product_option['required']
            );
        }

        return $product_option_data;
    } ]]></add>
		</operation>
                
                <operation>
			<search position="before"><![CDATA[public function getProductGroupedType($product_id) {]]></search>
			<add><![CDATA[public function getOption($option_id) {
		$query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "option` o LEFT JOIN " . DB_PREFIX . "option_description od ON (o.option_id = od.option_id) WHERE o.option_id = '" . (int)$option_id . "' AND od.language_id = '" . (int)$this->config->get('config_language_id') . "'");
		
		return $query->row;
	} ]]></add>
		</operation>
                
              <operation>
			<search position="before"><![CDATA[public function getProductGroupedType($product_id) {]]></search>
			<add><![CDATA[public function getOptionValue($option_value_id) {
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "option_value ov LEFT JOIN " . DB_PREFIX . "option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE ov.option_value_id = '" . (int)$option_value_id . "' AND ovd.language_id = '" . (int)$this->config->get('config_language_id') . "'");
		
		return $query->row;
	}]]></add>
		</operation>  
        </file>
       
</modification>